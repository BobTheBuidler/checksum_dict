def DefaultChecksumDict.__init__(self, default, seed):
    self :: dict
    default :: object
    seed :: union[dict, object, None]
    r0, r1 :: object
    r2 :: str
    r3, r4 :: object
    r5 :: object[2]
    r6 :: object_ptr
    r7 :: object
    r8 :: str
    r9 :: object
    r10 :: object[1]
    r11 :: object_ptr
    r12, r13 :: object
    r14 :: i32
    r15 :: bit
    r16 :: bool
    r17 :: dict
    r18 :: short_int
    r19 :: native_int
    r20 :: short_int
    r21 :: object
    r22 :: tuple[bool, short_int, object, object]
    r23 :: short_int
    r24 :: bool
    r25, r26, key, value :: object
    r27 :: i32
    r28, r29, r30 :: bit
    r31 :: dict
    r32 :: str
    r33 :: object
    r34 :: i32
    r35 :: bit
    r36 :: bool
    r37, r38, r39, r40 :: object
    r41 :: bool
    r42 :: object
    r43 :: bool
    r44 :: object
    r45 :: bool
    r46 :: i32
    r47, r48 :: bit
    r49 :: None
L0:
    if is_error(seed) goto L1 else goto L33
L1:
    r0 = box(None, 1)
    inc_ref r0
    seed = r0
L2:
    r1 = builtins :: module
    r2 = 'super'
    r3 = CPyObject_GetAttr(r1, r2)
    if is_error(r3) goto L34 (error at __init__:44) else goto L3
L3:
    r4 = checksum_dict.default.DefaultChecksumDict :: type
    r5 = [r4, self]
    r6 = load_address r5
    r7 = _PyObject_Vectorcall(r3, r6, 2, 0)
    dec_ref r3
    if is_error(r7) goto L34 (error at __init__:44) else goto L4
L4:
    r8 = '__init__'
    r9 = CPyObject_GetAttr(r7, r8)
    dec_ref r7
    if is_error(r9) goto L34 (error at __init__:44) else goto L5
L5:
    r10 = [default]
    r11 = load_address r10
    r12 = _PyObject_Vectorcall(r9, r11, 1, 0)
    dec_ref r9
    if is_error(r12) goto L34 (error at __init__:44) else goto L35
L6:
    r13 = load_address PyDict_Type
    r14 = PyObject_IsInstance(seed, r13)
    r15 = r14 >= 0 :: signed
    if not r15 goto L34 (error at __init__:45) else goto L7 :: bool
L7:
    r16 = truncate r14: i32 to builtins.bool
    if r16 goto L8 else goto L14 :: bool
L8:
    r17 = cast(dict, seed)
    if is_error(r17) goto L32 (error at __init__:46) else goto L9
L9:
    r18 = 0
    r19 = PyDict_Size(r17)
    r20 = r19 << 1
    r21 = CPyDict_GetItemsIter(r17)
    if is_error(r21) goto L36 (error at __init__:46) else goto L10
L10:
    r22 = CPyDict_NextItem(r21, r18)
    r23 = r22[1]
    r18 = r23
    r24 = r22[0]
    if r24 goto L11 else goto L37 :: bool
L11:
    r25 = r22[2]
    r26 = r22[3]
    dec_ref r22
    key = r25
    value = r26
    r27 = CPyDict_SetItem(self, key, value)
    dec_ref key
    dec_ref value
    r28 = r27 >= 0 :: signed
    if not r28 goto L38 (error at __init__:47) else goto L12 :: bool
L12:
    r29 = CPyDict_CheckSize(r17, r20)
    if not r29 goto L38 (error at __init__:46) else goto L10 :: bool
L13:
    r30 = CPy_NoErrOccurred()
    if not r30 goto L32 (error at __init__:46) else goto L31 :: bool
L14:
    r31 = checksum_dict.default.globals :: static
    r32 = 'Iterable'
    r33 = CPyDict_GetItem(r31, r32)
    if is_error(r33) goto L34 (error at __init__:48) else goto L15
L15:
    r34 = PyObject_IsInstance(seed, r33)
    dec_ref r33
    r35 = r34 >= 0 :: signed
    if not r35 goto L34 (error at __init__:48) else goto L16 :: bool
L16:
    r36 = truncate r34: i32 to builtins.bool
    if r36 goto L17 else goto L39 :: bool
L17:
    r37 = PyObject_GetIter(seed)
    dec_ref seed
    if is_error(r37) goto L32 (error at __init__:49) else goto L18
L18:
    r38 = PyIter_Next(r37)
    if is_error(r38) goto L40 else goto L19
L19:
    r39 = PyObject_GetIter(r38)
    dec_ref r38
    if is_error(r39) goto L41 (error at __init__:49) else goto L20
L20:
    r40 = PyIter_Next(r39)
    if is_error(r40) goto L42 else goto L23
L21:
    r41 = raise ValueError('not enough values to unpack')
    if not r41 goto L32 (error at __init__:49) else goto L22 :: bool
L22:
    unreachable
L23:
    key = r40
    r42 = PyIter_Next(r39)
    if is_error(r42) goto L43 else goto L26
L24:
    r43 = raise ValueError('not enough values to unpack')
    if not r43 goto L32 (error at __init__:49) else goto L25 :: bool
L25:
    unreachable
L26:
    value = r42
    r44 = PyIter_Next(r39)
    dec_ref r39
    if is_error(r44) goto L29 else goto L44
L27:
    r45 = raise ValueError('too many values to unpack')
    if not r45 goto L32 (error at __init__:49) else goto L28 :: bool
L28:
    unreachable
L29:
    r46 = CPyDict_SetItem(self, key, value)
    dec_ref key
    dec_ref value
    r47 = r46 >= 0 :: signed
    if not r47 goto L41 (error at __init__:50) else goto L18 :: bool
L30:
    r48 = CPy_NoErrOccurred()
    if not r48 goto L32 (error at __init__:49) else goto L31 :: bool
L31:
    return 1
L32:
    r49 = <error> :: None
    return r49
L33:
    inc_ref seed
    goto L2
L34:
    dec_ref seed
    goto L32
L35:
    dec_ref r12
    goto L6
L36:
    dec_ref r17
    goto L32
L37:
    dec_ref r17
    dec_ref r21
    dec_ref r22
    goto L13
L38:
    dec_ref r17
    dec_ref r21
    goto L32
L39:
    dec_ref seed
    goto L31
L40:
    dec_ref r37
    goto L30
L41:
    dec_ref r37
    goto L32
L42:
    dec_ref r37
    dec_ref r39
    goto L21
L43:
    dec_ref key
    dec_ref r37
    dec_ref r39
    goto L24
L44:
    dec_ref key
    dec_ref value
    dec_ref r37
    dec_ref r44
    goto L27

def DefaultChecksumDict.__init____DefaultChecksumDict_glue(self, default, seed):
    self :: checksum_dict.default.DefaultChecksumDict
    default :: object
    seed :: union[dict, object, None]
    r0 :: str
    r1 :: object
    r2 :: list
    r3, r4 :: ptr
    r5 :: dict
    r6 :: bool
    r7 :: i32
    r8 :: bit
    r9 :: tuple
    r10 :: object
    r11, r12 :: None
L0:
    r0 = '__init__'
    r1 = CPyObject_GetAttr(self, r0)
    if is_error(r1) goto L10 else goto L1
L1:
    r2 = PyList_New(1)
    if is_error(r2) goto L11 else goto L2
L2:
    r3 = get_element_ptr r2 ob_item :: PyListObject
    r4 = load_mem r3 :: ptr*
    inc_ref default
    set_mem r4, default :: builtins.object*
    r5 = PyDict_New()
    if is_error(r5) goto L12 else goto L3
L3:
    r6 = 0
    if is_error(seed) goto L5 else goto L4
L4:
    r7 = PyList_Append(r2, seed)
    r8 = r7 >= 0 :: signed
    if not r8 goto L13 else goto L6 :: bool
L5:
    r6 = 1
L6:
    r9 = PyList_AsTuple(r2)
    dec_ref r2
    if is_error(r9) goto L14 else goto L7
L7:
    r10 = PyObject_Call(r1, r9, r5)
    dec_ref r1
    dec_ref r9
    dec_ref r5
    if is_error(r10) goto L10 else goto L8
L8:
    r11 = unbox(None, r10)
    dec_ref r10
    if is_error(r11) goto L10 else goto L9
L9:
    return r11
L10:
    r12 = <error> :: None
    return r12
L11:
    dec_ref r1
    goto L10
L12:
    dec_ref r1
    dec_ref r2
    goto L10
L13:
    dec_ref r1
    dec_ref r2
    dec_ref r5
    goto L10
L14:
    dec_ref r1
    dec_ref r5
    goto L10

def DefaultChecksumDict._getitem_nochecksum(self, key):
    self :: dict
    key :: object
    r0 :: i32
    r1 :: bit
    r2 :: bool
    r3 :: object
    r4 :: str
    r5 :: object[1]
    r6 :: object_ptr
    r7 :: object
    r8 :: str
    r9 :: object[3]
    r10 :: object_ptr
    r11, r12 :: object
L0:
    r0 = PyDict_Contains(self, key)
    r1 = r0 >= 0 :: signed
    if not r1 goto L7 (error at _getitem_nochecksum:70) else goto L1 :: bool
L1:
    r2 = truncate r0: i32 to builtins.bool
    if r2 goto L2 else goto L4 :: bool
L2:
    r3 = CPyDict_GetItem(self, key)
    if is_error(r3) goto L7 (error at _getitem_nochecksum:71) else goto L3
L3:
    return r3
L4:
    r4 = 'default_factory'
    r5 = [self]
    r6 = load_address r5
    r7 = PyObject_VectorcallMethod(r4, r6, 9223372036854775809, 0)
    if is_error(r7) goto L7 (error at _getitem_nochecksum:72) else goto L5
L5:
    r8 = '_setitem_nochecksum'
    r9 = [self, key, r7]
    r10 = load_address r9
    r11 = PyObject_VectorcallMethod(r8, r10, 9223372036854775811, 0)
    if is_error(r11) goto L8 (error at _getitem_nochecksum:73) else goto L9
L6:
    return r7
L7:
    r12 = <error> :: object
    return r12
L8:
    dec_ref r7
    goto L7
L9:
    dec_ref r11
    goto L6

def DefaultChecksumDict._getitem_nochecksum__DefaultChecksumDict_glue(self, key):
    self :: checksum_dict.default.DefaultChecksumDict
    key :: object
    r0 :: str
    r1 :: object[2]
    r2 :: object_ptr
    r3, r4 :: object
L0:
    r0 = '_getitem_nochecksum'
    r1 = [self, key]
    r2 = load_address r1
    r3 = PyObject_VectorcallMethod(r0, r2, 9223372036854775810, 0)
    if is_error(r3) goto L2 else goto L1
L1:
    return r3
L2:
    r4 = <error> :: object
    return r4

def __top_level__():
    r0, r1 :: object
    r2 :: bit
    r3 :: str
    r4, r5 :: object
    r6 :: str
    r7 :: dict
    r8, r9 :: object
    r10 :: str
    r11 :: dict
    r12, r13 :: object
    r14 :: str
    r15 :: dict
    r16, r17 :: object
    r18 :: str
    r19 :: dict
    r20 :: object
    r21 :: dict
    r22 :: str
    r23 :: object
    r24 :: dict
    r25 :: str
    r26 :: object
    r27 :: dict
    r28 :: str
    r29 :: object
    r30 :: tuple[object, object]
    r31, r32 :: object
    r33 :: dict
    r34 :: str
    r35 :: object
    r36 :: dict
    r37 :: str
    r38, r39 :: object
    r40 :: tuple
    r41 :: str
    r42, r43 :: object
    r44, r45 :: str
    r46 :: tuple
    r47 :: i32
    r48 :: bit
    r49 :: dict
    r50 :: str
    r51 :: i32
    r52 :: bit
    r53 :: None
L0:
    r0 = builtins :: module
    r1 = load_address _Py_NoneStruct
    r2 = r0 != r1
    if r2 goto L3 else goto L1 :: bool
L1:
    r3 = 'builtins'
    r4 = PyImport_Import(r3)
    if is_error(r4) goto L20 (error at <module>:-1) else goto L2
L2:
    builtins = r4 :: module
    dec_ref r4
L3:
    r5 = ('Callable', 'DefaultDict', 'Iterable', 'Optional')
    r6 = 'typing'
    r7 = checksum_dict.default.globals :: static
    r8 = CPyImport_ImportFromMany(r6, r5, r5, r7)
    if is_error(r8) goto L20 (error at <module>:1) else goto L4
L4:
    typing = r8 :: module
    dec_ref r8
    r9 = ('ChecksumAddress',)
    r10 = 'eth_typing'
    r11 = checksum_dict.default.globals :: static
    r12 = CPyImport_ImportFromMany(r10, r9, r9, r11)
    if is_error(r12) goto L20 (error at <module>:3) else goto L5
L5:
    eth_typing = r12 :: module
    dec_ref r12
    r13 = ('mypyc_attr',)
    r14 = 'mypy_extensions'
    r15 = checksum_dict.default.globals :: static
    r16 = CPyImport_ImportFromMany(r14, r13, r13, r15)
    if is_error(r16) goto L20 (error at <module>:4) else goto L6
L6:
    mypy_extensions = r16 :: module
    dec_ref r16
    r17 = ('ChecksumAddressDict', 'T', '_SeedT')
    r18 = 'checksum_dict.base'
    r19 = checksum_dict.default.globals :: static
    r20 = CPyImport_ImportFromMany(r18, r17, r17, r19)
    if is_error(r20) goto L20 (error at <module>:6) else goto L7
L7:
    checksum_dict.base = r20 :: module
    dec_ref r20
    r21 = checksum_dict.default.globals :: static
    r22 = 'DefaultDict'
    r23 = CPyDict_GetItem(r21, r22)
    if is_error(r23) goto L20 (error at <module>:10) else goto L8
L8:
    r24 = checksum_dict.default.globals :: static
    r25 = 'ChecksumAddress'
    r26 = CPyDict_GetItem(r24, r25)
    if is_error(r26) goto L21 (error at <module>:10) else goto L9
L9:
    r27 = checksum_dict.default.globals :: static
    r28 = 'T'
    r29 = CPyDict_GetItem(r27, r28)
    if is_error(r29) goto L22 (error at <module>:10) else goto L10
L10:
    r30 = (r26, r29)
    r31 = box(tuple[object, object], r30)
    r32 = PyObject_GetItem(r23, r31)
    dec_ref r23
    dec_ref r31
    if is_error(r32) goto L20 (error at <module>:10) else goto L11
L11:
    r33 = checksum_dict.default.globals :: static
    r34 = 'ChecksumAddressDict'
    r35 = CPyDict_GetItem(r33, r34)
    if is_error(r35) goto L23 (error at <module>:10) else goto L12
L12:
    r36 = checksum_dict.default.globals :: static
    r37 = 'T'
    r38 = CPyDict_GetItem(r36, r37)
    if is_error(r38) goto L24 (error at <module>:10) else goto L13
L13:
    r39 = PyObject_GetItem(r35, r38)
    dec_ref r35
    dec_ref r38
    if is_error(r39) goto L23 (error at <module>:10) else goto L14
L14:
    r40 = PyTuple_Pack(2, r32, r39)
    dec_ref r32
    dec_ref r39
    if is_error(r40) goto L20 (error at <module>:10) else goto L15
L15:
    r41 = 'checksum_dict.default'
    r42 = checksum_dict.default.DefaultChecksumDict_template :: type
    r43 = CPyType_FromTemplate(r42, r40, r41)
    dec_ref r40
    if is_error(r43) goto L20 (error at <module>:10) else goto L16
L16:
    r44 = '__mypyc_attrs__'
    r45 = '__dict__'
    r46 = PyTuple_Pack(1, r45)
    if is_error(r46) goto L25 (error at <module>:10) else goto L17
L17:
    r47 = PyObject_SetAttr(r43, r44, r46)
    dec_ref r46
    r48 = r47 >= 0 :: signed
    if not r48 goto L25 (error at <module>:10) else goto L18 :: bool
L18:
    checksum_dict.default.DefaultChecksumDict = r43 :: type
    r49 = checksum_dict.default.globals :: static
    r50 = 'DefaultChecksumDict'
    r51 = CPyDict_SetItem(r49, r50, r43)
    dec_ref r43
    r52 = r51 >= 0 :: signed
    if not r52 goto L20 (error at <module>:10) else goto L19 :: bool
L19:
    return 1
L20:
    r53 = <error> :: None
    return r53
L21:
    dec_ref r23
    goto L20
L22:
    dec_ref r23
    dec_ref r26
    goto L20
L23:
    dec_ref r32
    goto L20
L24:
    dec_ref r32
    dec_ref r35
    goto L20
L25:
    dec_ref r43
    goto L20
